name: Docker Build and Deploy to AWS Elastic Beanstalk

on:
  push:
    branches:
      - main # Trigger on pushes to the main branch

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          cd webApp
          DOCKER_BUILDKIT=1 docker build -t ${{ secrets.DOCKER_USERNAME }}/flask-app-server:latest .

      - name: Push Docker image to Docker Hub
        run: |
          cd webApp
          docker push ${{ secrets.DOCKER_USERNAME }}/flask-app-server:latest

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} # AWS Access Key
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # AWS Secret Key
          aws-region: ap-south-1 # AWS Region, adjust as necessary

      - name: Install Elastic Beanstalk CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip3 install awsebcli --upgrade --user

      - name: Initialize Elastic Beanstalk with EB CLI
        run: |
          eb init -p docker --region ap-south-1 --no-verify
          eb use flask-app-server-env || echo "Environment doesn't exist, skipping use"

      - name: Terminate Existing Elastic Beanstalk Environment
        run: |
          eb terminate flask-app-server-env --force --region ap-south-1 || echo "Environment doesn't exist, skipping termination"

      - name: Wait for Termination to Complete
        run: |
          while eb list | grep -q flask-app-server-env; do
            echo "Waiting for environment to terminate..."
            sleep 10
          done
          echo "Environment terminated successfully."

      - name: Create a new EC2 Key Pair
        run: |
          KEY_NAME="temp-keypair-${{ github.run_id }}"
          aws ec2 create-key-pair --key-name $KEY_NAME --query 'KeyMaterial' --output text > $KEY_NAME.pem | tee $KEY_NAME.pem
          chmod 400 $KEY_NAME.pem
          echo "KEY_NAME=$KEY_NAME" >> $GITHUB_ENV
          echo "KEY_FILE=$KEY_NAME.pem" >> $GITHUB_ENV

      - name: Create New Elastic Beanstalk Environment with Free Tier Configuration
        run: |
          eb create flask-app-server-env \
            --region ap-south-1 \
            --cname flask-app-server-env \
            --no-verify \
            --instance-type t3.small \
            --keyname ${{ env.KEY_NAME }} \
            --envvars DOCKER_IMAGE=${{ secrets.DOCKER_USERNAME }}/flask-app-server:latest

      - name: Deploy Docker Image to Elastic Beanstalk
        run: |
          eb use flask-app-server-env
          eb deploy --no-verify

      - name: Retrieve EC2 Instance & Security Group Info
        run: |
          EB_INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:elasticbeanstalk:environment-name,Values=flask-app-server-env" \
            --query "Reservations[*].Instances[*].InstanceId" --output text | awk '{print $1}')

          echo "EC2_INSTANCE_ID:= $EB_INSTANCE_ID"
          echo "EC2_INSTANCE_ID<<EOF" >> $GITHUB_ENV
          echo "$EB_INSTANCE_ID" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          SG_ID=$(aws ec2 describe-instances \
            --instance-ids $EB_INSTANCE_ID \
            --query "Reservations[*].Instances[*].SecurityGroups[*].GroupId" --output text | head -n 1)

          echo "SECURITY_GROUP_ID:= $SG_ID"
          echo "SECURITY_GROUP_ID=$SG_ID" >> $GITHUB_ENV

          PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-ids $EB_INSTANCE_ID \
            --query "Reservations[*].Instances[*].PublicIpAddress" --output text)

          echo "PUBLIC_IP:= $PUBLIC_IP"
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV

      - name: Allow Access Temporarily
        run: |
          RUNNER_IP=$(curl -s http://checkip.amazonaws.com)

          aws ec2 authorize-security-group-ingress \
            --group-id ${{ env.SECURITY_GROUP_ID }} \
            --protocol tcp --port 22 --cidr ${RUNNER_IP}/32

      - name: Debug Security Group Rules
        run: |
          aws ec2 describe-security-groups --group-ids ${{ env.SECURITY_GROUP_ID }}

      - name: Install Certbot and Enable HTTPS
        run: |
          ssh -v -i ${{ env.KEY_FILE }} -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ServerAliveInterval=30 -o ServerAliveCountMax=5 ec2-user@${{ env.PUBLIC_IP }} << 'EOF'
            sudo yum update -y

            sudo amazon-linux-extras enable epel
            sudo amazon-linux-extras install epel -y
            sudo yum install -y epel-release

            sudo yum groupinstall -y "Development Tools"
            sudo yum install -y openssl11
            sudo yum install -y gcc gcc-c++ make zlib-devel bzip2 bzip-devel readline-devel \
                sqlite sqlite-devel openssl-devel tk-devel libffi-devel xz xz-devel
              
            PYTHON_VERSION=3.12.0
            cd /usr/src
            sudo curl -O https://www.python.org/ftp/python/$PYTHON_VERSION/Python-$PYTHON_VERSION.tgz
            sudo tar xvf Python-$PYTHON_VERSION.tgz
            cd Python-$PYTHON_VERSION
            sudo find /usr/lib usr/lib64 -name 'libssl.so*' 2>/dev/null
            sudo ./configure --enable-optimizations --with-openssl-rpath=/usr/lib64
            sudo make altinstall

            sudo alternatives --install /usr/bin/python3 python3 /usr/bin/python3.12 1
            sudo alternatives --set python3 /usr/bin/python3.12

            sudo ln -sf /usr/local/bin/python3.12 /usr/bin/python3
            sudo ln -sf /usr/local/bin/pip3.12 /usr/bin/pip3
            export PATH=$PATH:/usr/local/bin

            python3 --version
            python3 -c "import ssl; print(ssl.OPENSSl_VERSION)"

            sudo yum install -y nginx

            sudo python3 -m venv /opt/certbot/
            sudo /opt/certbot/bin/pip install --upgrade pip

            sudo /opt/certbot/bin/pip install certbot certbot-nginx

            sudo ln -s /opt/certbot/bin/certbot /usr/bin/certbot

            sudo systemctl start nginx
            sudo systemctl enable nginx

            sudo certbot --nginx -d flask-app-server-env.ap-south-1.elasticbeanstalk.com --non-interactive --agree-tos -m singhaadi2004@gmail.com

            sudo systemctl restart nginx

            echo "0 0, 12 * * * root /opt/certbot/bin/python -c 'import random; import time; time.sleep(random.random() * 3600)' && sudo certbot renew -q" | sudo tee -a /etc/crontab > /dev/null
          EOF

      - name: Remove SSH Access for Security
        run: |
          RUNNER_IP=$(curl -s http://checkip.amazonaws.com)

          aws ec2 revoke-security-group-ingress \
            --group-id ${{ env.SECURITY_GROUP_ID }} \
            --protocol tcp --port 22 --cidr ${RUNNER_IP}/32

      - name: Clean up the Key Pair
        run: |
          aws ec2 delete-key-pair --key-name ${{ env.KEY_NAME }}
          rm ${{ env.KEY_FILE }}
