name: Docker Build and Deploy to AWS Elastic Beanstalk

on:
  push:
    branches:
      - main # Trigger on pushes to the main branch

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          cd webApp
          DOCKER_BUILDKIT=1 docker build -t ${{ secrets.DOCKER_USERNAME }}/flask-app-server:latest .

      - name: Push Docker image to Docker Hub
        run: |
          cd webApp
          docker push ${{ secrets.DOCKER_USERNAME }}/flask-app-server:latest

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} # AWS Access Key
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # AWS Secret Key
          aws-region: ap-south-1 # AWS Region, adjust as necessary

      - name: Install Elastic Beanstalk CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip3 install awsebcli --upgrade --user

      - name: Initialize Elastic Beanstalk with EB CLI
        run: |
          eb init -p docker --region ap-south-1 --no-verify
          eb use flask-app-server-env || echo "Environment doesn't exist, skipping use"

      - name: Terminate Existing Elastic Beanstalk Environment
        run: |
          eb terminate flask-app-server-env --force --region ap-south-1 || echo "Environment doesn't exist, skipping termination"

      - name: Wait for Termination to Complete
        run: |
          while eb list | grep -q flask-app-server-env; do
            echo "Waiting for environment to terminate..."
            sleep 10
          done
          echo "Environment terminated successfully."

      - name: Create New Elastic Beanstalk Environment with Free Tier Configuration
        run: |
          eb create flask-app-server-env \
            --region ap-south-1 \
            --cname flask-app-server-env \
            --no-verify \
            --single \
            --instance-type t2.micro \
            --keyname ${{ env.KEY_NAME }} \
            --envvars DOCKER_IMAGE=${{ secrets.DOCKER_USERNAME }}/flask-app-server:latest

      - name: Deploy Docker Image to Elastic Beanstalk
        run: |
          eb use flask-app-server-env
          eb deploy --no-verify
